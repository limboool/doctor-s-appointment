import eel # подключение билиотеки для клиент части
import json # подключение библиотеки для работы с JSON данными
import sqlite3 # подключение библиотеки для работы с базой SQLite

# https://pythonru.com/biblioteki/vvedenie-v-sqlite-python

# Для подключения к SQLite нужно выполнить следующие шаги

# Использовать метод connect() из модуля sqlite3 и передать в качестве аргумента название базы данных.
# Создать объект cursor с помощью объекта соединения, который вернул прошлый метод для выполнения SQLite-запросов из Python.
# Перехватить исключение базы данных, если в процессе подключения произошла ошибка.

conn = sqlite3.connect('db.db')

@eel.expose
# функция обработки запросов на запись, изменение удаление
def requests(request):
    # Блок try-except-finally: весь код расположен в блоке try-except, что позволит перехватить исключения и ошибки базы данных, которые могут появиться в процессе.
    # С помощью класса sqlite3.Error можно обработать любую ошибку и исключение, которые могут появиться при работе с SQLite из Python.
    # Это позволит сделать приложение более отказоустойчивым. Класс sqlite3.Error позволит понять суть ошибки. Он возвращает сообщение и код ошибки.
    try:
      # Создать объект cursor с помощью объекта соединения, который вернул прошлый метод для выполнения SQLite-запросов из Python.
      stmt = conn.cursor()
      # с помощью метода execute объекта cursor можно выполнить запрос в базу данных из Python. Он принимает SQLite-запрос в качестве параметра и возвращает
      stmt.execute(request)
      # выполнение запроса
      conn.commit()
    except sqlite3.Error as error:
      print(error)

@eel.expose
def get_requests(request):
    # Создать объект cursor с помощью объекта соединения, который вернул прошлый метод для выполнения SQLite-запросов из Python.
    stmt = conn.cursor()
    # с помощью метода execute объекта cursor можно выполнить запрос в базу данных из Python. Он принимает SQLite-запрос в качестве параметра и возвращает
    stmt.execute(request)
    # выполнение запроса
    conn.commit()
    # получение всех строк из запроса
    rows = stmt.fetchall()
    # возврат ответа от функции
    return rows
